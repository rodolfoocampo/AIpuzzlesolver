;; esta función te dice dónde esta el cero dado un estado, es decir, devuelve el índice. Esto lo usaremos para buscar posibles movimientos a partir
;; de este punto
(defun encuentracero (estado)
    (setq ind 0)
    (loop 
    (when (eq (nth ind estado) 0)(return ind))
    (when (eq ind 9)(return 0))
    (incf ind)
    )
 )
 

 
 (setq posibles '((1 3) (0 2 4) (1 5) (0 4 6) (1 3 5 7) (2 4 8) (3 7) (6 4 8) (5 7)))
 
;; swapea dos elementos de una lista dados sus índices

(defun swap (i j estado)
    (setq aux (nth i estado))
    (setq estado (insert-at-n i estado (nth j estado)))
    (setq estado (insert-at-n j estado aux))
 estado)
 
 ;; esta función inserta un elemento en una lista en el índice n dado
 
 (defun insert-at-n (n lst elem)
(cond
((null lst)(list elem))
((zerop n) (cons elem (cdr lst)))
((not(minusp n)) (cons (car lst)
(insert-at-n (1- n)(cdr lst) elem)))
(T (write "error"))))

;; buscamos dónde está cero, vemos que movimientos puede hacer desde ese lugar y los hacemos usando el swap entre el lugar actual del
;; cero y sus posibilidades

(defun genera-hijitos (estado)
    (setq hijos '())
    (setq lugar-cero (encuentracero estado))
    (setq posibles-particular (nth lugar-cero posibles))
    (dolist (n posibles-particular)
    (push (swap n lugar-cero estado) hijos)
    )
hijos)







;; definicion de nodo (estado papa nivel heuristica total)

(DEFUN manhattan(estado)
	(SETQ man 0)
	(SETQ i 0)		;; man es la distancia manhattan del estado total
	(LOOP  
			(WHEN (> i 8) (RETURN man))
			(SETF actual (NTH i estado))
			(SETF distancia_ith (NTH i distancias))
			(SETF costo_i (NTH actual distancia_ith))
			(INCF man costo_i)
			(INCF i)))
		
(SETQ distancias '((0 1 2 1 2 3 2 3 4) (1 0 1 2 1 2 3 2 3) (2 1 0 3 2 1 4 3 2) 
				   (1 2 3 0 1 2 1 2 3) (2 1 2 1 0 1 2 1 2) (3 2 1 2 1 0 3 2 1) 
				   (2 3 4 1 2 3 0 1 2) (3 2 3 2 1 2 1 0 1) (4 3 2 3 2 1 2 1 0)))
				   
;; definicion de nodo (estado papa nivel heuristica total movimiento)  

(defun heuristica (estado)
 	(manhattan estado)
 )
     
(defun get-estado (nodo)
   (nth 0 nodo)
)

(defun get-papa (nodo)
   (nth 1 nodo)
)

(defun get-nivel (nodo)
   (nth 2 nodo)
)

(defun get-heuristica (nodo)
   (nth 3 nodo)
)

(defun get-total (nodo)
   (nth 4 nodo)
)

(defun get-mi-direc (nodo)
   (nth 6 nodo)	
)

(defun get-dirpapa (nodo)
   (nth 5 nodo)
)



(defun get-nodo-papa (nodo)
    (nth 7 nodo)
)

;; definicion de nodo -> ("mi estado" "estado de mi papa" "mi-nivel-de-profundidad" "mi heuristica" "mi costo total f score"
;;"el movimiento que llevo a mi" "el movimiento que llevo a mi papa" "el nodo de mi papa")



;; con esta función vemos el índice del nodo más prometedor en abierto, examinando su costo total que está en la cuarta posición
;; del objeto nodo (expresado como lista)

(defun find-min-cost (ab)
   (setf minVal (nth 4 (car ab)))
    (setf mindex 0)
    (setf i 0)
    (dolist (n ab)
        (setf costoN (nth 4 n))
        (if 
            (< costoN minVal) (setq mindex i)(setf minVal costoN)
        )
        (incf i)
    )
 mindex)
 
  (defun valido(oper1 oper2)
    (cond
        ((and (equal oper1 'izquierda)(equal oper2 'derecha))nil)
        ((and (equal oper1 'derecha)(equal oper2 'izquierda))nil)
        ((and (equal oper1 'arriba)(equal oper2 'abajo))nil)
        ((and (equal oper1 'abajo)(equal oper2 'arriba))nil)
        (t)))
 

(defun genera-nodos2 (nodo)
   (setq hijos '())
   (setq state (get-estado nodo))
   (setq lugar-cero (encuentracero state))
   (setq posibles-particular (nth lugar-cero posibles))
   (dolist (n posibles-particular)
    (setq nuevo (genera-nodo nodo state (get-nivel nodo) n lugar-cero (get-mi-direc nodo)))
    (if
    	(valido (get-mi-direc nuevo) (get-dirpapa nuevo)) (push nuevo hijos))
    )
hijos)

(defun genera-nodo (nodo estado nivel n lugar-cero direc-papa)
    (setq hijo '())	
    (setq mi-direc (deDonde lugar-cero n))
    (push nodo hijo)
    (push mi-direc hijo)
    (push direc-papa hijo)
    (push (+ (+ 1 nivel) (heuristica (swap n lugar-cero estado))) hijo)
    (push (heuristica (swap n lugar-cero estado)) hijo)
    (push (incf nivel) hijo)
    ;; este es el papa
    (push estado hijo)
    ;; este es el hijo
    (push (swap n lugar-cero estado) hijo)
hijo)

 (defun deDonde(indInicial indFinal)
    (cond
        ((= indFinal (+ indInicial 1)) (setq res 'derecha))
        ((> indFinal (+ indInicial 1)) (setq res 'abajo))
        ((= indFinal (- indInicial 1)) (setq res 'Izquierda))
        (t(setq res 'arriba))))




 
 
 
(defun aEstrella (estado-inicial estado-meta)
   (setq abierto ())
   (setq cerrado ())

   
    (push (list estado-inicial nil 0 (heuristica estado-inicial) (+ 0 (heuristica estado-inicial)) nil) abierto)
    
    (loop
        ; Crear lista con solo los puzzles para poder buscar en ellos más facilmente.
        (when (null abierto) nil)
        (setq abierto-puzzles ())
        (dolist (n abierto)
	    (print n)
            (push (get-estado n) abierto-puzzles))
        ; Crear lista con solo los puzzles para poder buscar en ellos más facilmente.
        (setq cerrado-puzzles ())
        (dolist (n cerrado)
	    
            (push (get-estado n) cerrado-puzzles))
        (setf minCostIndex (find-min-cost abierto))
        (setf current (nth minCostIndex abierto))
        (setf hijos (genera-nodos2 current))
        (when (equal (get-estado current) estado-meta)(return (reconstruct actual)))
        ; Manda el actual a cerrado y lo borra de abierto
        (push (nth minCostIndex abierto) cerrado)
        (setq abierto (remove minCostIndex abierto))
        (dolist (n hijos) 
            ; Checar que el puzzle del n-esimo hijo no esté en cerrado.
            (if (null(member (get-estado n) cerrado-puzzles)) 
                (cond
                    ; Si no es miembro de abierto metelo a abierto.
                    ((null (member (get-estado n) abierto-puzzles))
                        (push n abierto))
                    ; Si esta en abierto, revisar si el costo de llegar a el es menor al costo 
                    ; de llegar al nodo igual que ya estabá en abierto. En cuyo caso:
                    ; meto a abierto el nuevo y saco el viejo.
                    (t (when (< (get-nivel n) (get-nivel (first (member n abierto))))
                        (setq abierto (remove (first (member n abierto)) abierto))
                        (push n abierto)))))))
    nil)

; Le das un nodo base y reconstruye el camino que se siguio para llegar a el. 
(defun reconstruct (base)
    (setq camino ())
    (cond
        ((null (fifth base))camino)
        (t (push (fifth base) camino)(reconstruct(second base)))))


 (defun valido(oper1 oper2)
    (cond
        ((and (equal oper1 'izquierda)(equal oper2 'derecha))nil)
        ((and (equal oper1 'derecha)(equal oper2 'izquierda))nil)
        ((and (equal oper1 'arriba)(equal oper2 'abajo))nil)
        ((and (equal oper1 'abajo)(equal oper2 'arriba))nil)
        (t)))



 
 
 
 
 
 
