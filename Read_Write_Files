Función leer de StackOverflow
(defun my-copy-file (from-file to-file)
  (with-open-file (input-stream from-file
                :direction :input
                :element-type '(unsigned-byte 8))
    (with-open-file (output-stream to-file
                   :direction :output
                   :if-exists :supersede
                   :if-does-not-exist :create
                   :element-type '(unsigned-byte 8))
      (let ((buf (make-array 4096 :element-type (stream-element-type input-stream))))
    (loop for pos = (read-sequence buf input-stream)
       while (plusp pos)
       do (write-sequence buf output-stream :end pos))))))

Función leer implementada
(DEFUN leer() 
	(SETQ l NIL)
	(LOOP
		(UNLESS (NULL l) (SETQ LST1 (LIST (READ l)(READ l)(READ l)(READ l)(READ l)(READ l)(READ l)(READ l)(READ l)) 
							LST2 (LIST (READ l)(READ l)(READ l)(READ l)(READ l)(READ l)(READ l)(READ l)(READ l)) 
							eb (LIST LST1) em (LIST LST2))
		(CLOSE l) (RETURN (escribir (list eb em))))
		(SETQ l (OPEN "/Users/Christian/Documents/Processing/sketch_8puzzleGUI/lst.txt" :if-does-not-exist nil))))

Función escribir implementada ;(OPEN "/Users/Christian/Documents/Processing/sketch_8puzzleGUI/sol.txt" :direction :output)
(DEFUN escribir(RES)
	(SETQ i 0 l RES)
	(SETQ r(OPEN "/Users/Christian/Documents/Processing/sketch_8puzzleGUI/res.txt" :direction :output))
	(LOOP WHILE (< i (LENGTH RES))
		DO(WRITE-LINE (WRITE-TO-STRING(POP l)) r)(INCF i))
		(CLOSE r))
